	#include	"xbase/xbase.h"

	.section	.bss
	.global		g_xb_joystate

g_xb_joystate:		ds.b XBJoyState.len*XB_JOY_COUNT

	.section	.text
	
	.global		xb_joy_init
	.global		xb_joy_poll

// Clears joypad state and sets default polling mode.
; void xb_joy_init(void)
xb_joy_init:
	moveq	#0, d0
	moveq	#XB_JOY_MODE_STANDARD, d1
	lea	g_xb_joystate, a0
	.rept	XB_JOY_COUNT
	move.w	d1, (a0)+  ; set mode field
	move.l	d0, (a0)+  ; clear out state
	move.l	d0, (a0)+  ; "
	.endr
	rts

// Samples inputs and calculates edges. Call before game logic.
; void xb_joy_poll(void)
xb_joy_poll:
	lea	g_xb_joystate, a0
	lea	XB_JOY_BASE, a1
	bsr.b	joy_poll_sub
	lea	XBJoyState.len(a0), a0
	addq.w	#2, a1
	; fall-through to joy_poll_sub

; a0 = sub
; a1 = input base
joy_poll_sub:
	moveq	#0, d0
	move.w	XBJoyState.now(a0), d1
	move.w	d1, XBJoyState.prev(a0)
	move.b	(a1), d0

;	tst.w	XBJoyState.mode(a0)
;	bne.w	sample_sixbutton  TODO

	; Read extended buttons based on illegal switch combos
	swap	d1  ; preserve previous
	move.w	d0, d1
	andi.w	#XB_JOY_MASK_UP | XB_JOY_MASK_DOWN, d1
	cmpi.w	#XB_JOY_MASK_UP | XB_JOY_MASK_DOWN, d1
	beq.s	0f
	ori.w	#XB_JOY_MASK_SELECT, d0
0:
	move.w	d0, d1
	andi.w	#XB_JOY_MASK_LEFT | XB_JOY_MASK_RIGHT, d1
	cmpi.w	#XB_JOY_MASK_LEFT | XB_JOY_MASK_RIGHT, d1
	beq.s	1f
	ori.w	#XB_JOY_MASK_START, d0
1:
	swap	d1  ; bring back previous
	; Generate edges
	move.w	d0, d2
	move.w	d0, XBJoyState.now(a0)
	not.w	d1
	and.w	d1, d0
	move.w	d0, XBJoyState.pos(a0)

	move.w	d2, d0
	move.w	XBJoyState.prev(a0), d0
	not.w	d0
	and.w	d0, d1
	move.w	d1, XBJoyState.neg(a0)

	rts
